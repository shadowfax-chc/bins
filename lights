#!/usr/bin/env python3
'''
A script to manage the keyboard lights
'''
import time
import dbus

from Xlib import Xutil
from ewmh import EWMH
from openrazer.client import DeviceManager

KEYS = {
    'Razer Blade Stealth (QHD)': {
        'esc': (0, 1),
        'f1': (0, 2),
        'f2': (0, 3),
        'f3': (0, 4),
        'f4': (0, 5),
        'f5': (0, 6),
        'f6': (0, 7),
        'f7': (0, 8),
        'f8': (0, 9),
        'f9': (0, 10),
        'f10': (0, 11),
        'f11': (0, 12),
        'f12': (0, 13),
        'ins': (0, 14),
        'del': (0, 15),

        '`': (1, 1),
        '1': (1, 2),
        '2': (1, 3),
        '3': (1, 4),
        '4': (1, 5),
        '5': (1, 6),
        '6': (1, 7),
        '7': (1, 8),
        '8': (1, 9),
        '9': (1, 10),
        '0': (1, 11),
        '-': (1, 12),
        '=': (1, 13),
        'backspace_1': (1, 14),
        'backspace_2': (1, 15),
        'backspace': [(1, 14), (1, 15)],

        'tab_1': (2, 0),
        'tab_2': (2, 1),
        'tab': [(2, 0), (2, 1)],
        'q': (2, 2),
        'w': (2, 3),
        'e': (2, 4),
        'r': (2, 5),
        't': (2, 6),
        'y': (2, 7),
        'u': (2, 8),
        'i': (2, 9),
        'o': (2, 10),
        'p': (2, 11),
        '[': (2, 12),
        ']': (2, 13),
        '\\_1': (2, 14),
        '\\_2': (2, 15),
        '\\': [(2, 14), (2, 15)],

        'caps_1': (3, 0),
        'caps_2': (3, 1),
        'caps': [(3, 0), (3, 1)],
        'a': (3, 2),
        's': (3, 3),
        'd': (3, 4),
        'f': (3, 5),
        'g': (3, 6),
        'h': (3, 7),
        'j': (3, 8),
        'k': (3, 9),
        'l': (3, 10),
        ';': (3, 11),
        '\'': (3, 12),
        'enter_1': (3, 13),
        'enter_2': (3, 14),
        'enter_3': (3, 15),
        'enter': [(3, 13), (3, 14), (3, 15)],

        'lshift_1': (4, 0),
        'lshift_2': (4, 1),
        'lshift': [(4, 0), (4, 1)],
        'z': (4, 2),
        'x': (4, 3),
        'c': (4, 4),
        'v': (4, 5),
        'b': (4, 6),
        'n': (4, 7),
        'm': (4, 8),
        ',': (4, 9),
        '.': (4, 10),
        '/': (4, 11),
        'rshift_1': (4, 12),
        'rshift_2': (4, 13),
        'rshift_3': (4, 14),
        'rshift': [(4, 12), (4, 13), (4, 14)],

        'lctrl': (5, 0),
        'lfn': (5, 1),
        'lwin': (5, 2),
        'lalt': (5, 3),
        'space': [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
        'ralt': (5, 9),
        'rfn': (5, 10),
        'rcltrl': (5, 11),
        'larrow': (5, 12),
        'uarrow': (5, 13),
        'rarrow': (5, 14),
        'darrow': (5, 15),
    },
    'Razer BlackWidow Chroma': {
        'm1': (1, 0),
        'm2': (2, 0),
        'm3': (3, 0),
        'm4': (4, 0),
        'm5': (5, 0),

        'esc': (0, 1),
        'f1': (0, 3),
        'f2': (0, 4),
        'f3': (0, 5),
        'f4': (0, 6),
        'f5': (0, 7),
        'f6': (0, 8),
        'f7': (0, 9),
        'f8': (0, 10),
        'f9': (0, 11),
        'f10': (0, 12),
        'f11': (0, 13),
        'f12': (0, 14),

        '`': (1, 1),
        '1': (1, 2),
        '2': (1, 3),
        '3': (1, 4),
        '4': (1, 5),
        '5': (1, 6),
        '6': (1, 7),
        '7': (1, 8),
        '8': (1, 9),
        '9': (1, 10),
        '0': (1, 11),
        '-': (1, 12),
        '=': (1, 13),
        'backspace': (1, 14),

        'tab': (2, 1),
        'q': (2, 2),
        'w': (2, 3),
        'e': (2, 4),
        'r': (2, 5),
        't': (2, 6),
        'y': (2, 7),
        'u': (2, 8),
        'i': (2, 9),
        'o': (2, 10),
        'p': (2, 11),
        '[': (2, 12),
        ']': (2, 13),
        '\\': (2, 14),

        'caps':(3, 1),
        'a': (3, 2),
        's': (3, 3),
        'd': (3, 4),
        'f': (3, 5),
        'g': (3, 6),
        'h': (3, 7),
        'j': (3, 8),
        'k': (3, 9),
        'l': (3, 10),
        ';': (3, 11),
        '\'': (3, 12),
        'enter': (3, 14),

        'lshift': (4, 1),
        'z': (4, 3),
        'x': (4, 4),
        'c': (4, 5),
        'v': (4, 6),
        'b': (4, 7),
        'n': (4, 8),
        'm': (4, 9),
        ',': (4, 10),
        '.': (4, 11),
        '/': (4, 12),
        'rshift': (4, 14),

        'lctrl': (5, 1),
        'lwin': (5, 2),
        'lalt': (5, 3),
        'space': [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)],
        'ralt': (5, 11),
        'rfn': (5, 12),
        'rclick': (5, 13),
        'rcltrl': (5, 14),

        'printscrn': (0, 15),
        'src': (0, 16),
        'pause': (0, 17),

        'ins': (1, 15),
        'home': (1, 16),
        'pgup': (1, 17),

        'del': (2, 15),
        'end': (2, 16),
        'pgdn': (2, 17),

        'uarrow': (4, 16),
        'larrow': (5, 15),
        'darrow': (5, 16),
        'rarrow': (5, 17),

        'pad_numlk': (1, 18),
        'pad_/': (1, 19),
        'pad_*': (1, 20),
        'pad_-': (1, 21),

        'pad_7': (2, 18),
        'pad_8': (2, 19),
        'pad_9': (2, 20),
        'pad_+': (2, 21),

        'pad_4': (3, 18),
        'pad_5': (3, 19),
        'pad_6': (3, 20),

        'pad_1': (4, 18),
        'pad_2': (4, 19),
        'pad_3': (4, 20),
        'pad_enter': (4, 21),

        'pad_0': (5, 19),
        'pad_.': (5, 20),
    }
}


class Layout(object):
    '''
    A keyboard layout
    '''
    letters = [
        'q',
        'w',
        'e',
        'r',
        't',
        'y',
        'u',
        'i',
        'o',
        'p',
        'a',
        's',
        'd',
        'f',
        'g',
        'h',
        'j',
        'k',
        'l',
        'z',
        'x',
        'c',
        'v',
        'b',
        'n',
        'm',
    ]
    numbers = [
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '0',
    ]
    vim_keys = {
        'normal': {
            'motion': [
                'w',
                'e',
                'b',
                'h',
                'j',
                'k',
                'l',
                '0',
                '^',
                '$',
                'f',
                't',
                ';',
                ',',
                'g',
            ],
            'insert': [
                'a',
                'i'
                'o',
                's',
                'c',
            ],
            'modify': [
                'x',
                'd',
                'r',
                'y',
                'p',
            ],
            'special': [
                ':',
                '/',
                'q',
                '\'',
                '.',
            ],
        },
        'insert': {
            'typing': letters + numbers + [
                '`',
                '-',
                '=',
                '[',
                ']',
                ';',
                '\'',
                ',',
                '.',
                '/',
                '\\',
            ],
            'normal': [
                'esc',
            ]
        }
    }

    def __init__(self, device, colors):
        self.device = device
        self.colors = colors
        self._keys = KEYS[self.device.name]

    def set_color(self, key, color):
        self.device.fx.advanced.matrix[self._keys[key]] = color

    def set_letters(self, color):
        for key in self.letters:
            self.set_color(key, color)

    def set_vim_off(self):
        self.set_letters(self.colors['clear'])

    def set_vim_insert(self):
        for key in self.vim_keys['insert']['typing']:
            self.set_color(key, self.colors['blue'])

        for key in self._vim_keys['insert']['normal']:
            self.set_color(key, self.colors['red'])

    def set_vim_normal(self):
        motion_color = self.colors['green']
        insert_color = self.colors['red']
        special_color = self.colors['gray']
        modify_color = self.colors['blue']

        for key in self.vim_keys['insert']['typing']:
            self.set_color(key, self.colors['clear'])

        for key in self.vim_keys['insert']['normal']:
            self.set_color(key, self.colors['clear'])


        for key in self.vim_keys['normal']['motion']:
            self.set_color(key, motion_color)

        for key in self.vim_keys['normal']['insert']:
            self.set_color(key, insert_color)

        for key in self.vim_keys['normal']['special']:
            self.set_color(key, special_color)

        for key in self.vim_keys['normal']['modify']:
            self.set_color(key, modify_color)


class KeyboardLights(object):
    '''
    Manager lights for the keyboard
    '''
    colors = {
        'clear': (0, 0, 0),
        'gray': (32, 32, 32),
        'green': (96, 128, 0),
        'blue': (0, 96, 128),
        'yellow': (64, 64, 0),
        'red': (128, 8, 0),
    }

    def __init__(self, battery=True):
        self.device = None
        self.flash = True
        self.battery_state = None
        self.vim_mode = 'off'

        # Create a DeviceManager. This is used to get specific devices
        device_manager = DeviceManager()
        # Disable daemon effect syncing.
        # Without this, the daemon will try to set the lighting effect to every device.
        device_manager.sync_effects = False
        for device in device_manager.devices:
            if (device.type == 'keyboard' and device.name == 'Razer Blade Stealth (QHD)'):
                self.device = device
                break
        if not self.device:
            print('No device found')

        self.layout = Layout(self.device, self.colors)
        self._vim_colors = {
            'off': self.layout.set_vim_off,
            'insert': self.layout.set_vim_insert,
            'normal': self.layout.set_vim_normal,
        }

        self.workspace_state = WorkspaceState()

        if battery:
            self.battery_state = BatteryState(colors=self.colors)

    def battery_colors(self):
        '''
        Set colors for battery life
        '''
        percent = self.battery_state.percentage
        charged = self.battery_state.charged
        color = self.battery_state.color
        charged_row = int((self.device.fx.advanced.rows - 1) * percent)
        if not charged:
            charged_row += 1
        bat_cols = [0, 1]
        for i in range(self.device.fx.advanced.rows):
            if i == charged_row:
                ccolor = color if self.flash or charged else self.colors['clear']
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = ccolor
            elif i <= charged_row:
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = color
            else:
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = self.colors['clear']

    def workspae_colors(self):
        '''
        Set colors for workspaces
        '''
        current = self.workspace_state.current
        active = self.workspace_state.active
        urgent = self.workspace_state.urgent
        total = self.workspace_state.total

        for workspace in range(0, total):
            if workspace == current:
                color = self.colors['green']
            elif workspace in urgent:
                color = self.colors['red']
            elif workspace in active:
                color = self.colors['blue']
            else:
                color = self.colors['gray']

            if workspace > 9:
                key = 'f{}'.format(workspace - 9)
            elif workspace == 9:
                key = str(0)
            else:
                key = str(workspace + 1)
            self.layout.set_color(key, color)

    def vim_colors(self):
        self._vim_colors[self.vim_mode]()

    def draw(self):
        '''
        Draw the colors
        '''
        self.flash = not self.flash

        if self.battery_state:
            self.battery_colors()
        self.workspae_colors()
        self.vim_colors()
        self.device.fx.advanced.draw()


class BatteryState(object):
    '''
    Track battery level
    '''
    def __init__(self, colors):
        self.colors = colors
        self.sysbus = dbus.SystemBus()
        battery_bus = self.sysbus.get_object(
            'org.freedesktop.UPower',
            '/org/freedesktop/UPower/devices/battery_BAT0',
        )
        self.properties = dbus.Interface(
            battery_bus,
            'org.freedesktop.DBus.Properties',
        )

    @property
    def percentage(self):
        ''' Get percent left '''
        percentage = self.properties.Get(
            'org.freedesktop.UPower.Device',
            'Percentage',
        )
        return percentage / 100.0

    @property
    def color(self):
        ''' Get color based on percentage '''
        percent = self.percentage
        if percent >= .5:
            return self.colors['green']

        if percent >= .2:
            return self.colors['yellow']

        return self.colors['red']

    @property
    def state(self):
        ''' Current state '''
        return self.properties.Get(
            'org.freedesktop.UPower.Device',
            'State',
        )

    @property
    def charged(self):
        ''' Check if charged '''
        return self.state not in [1, 2]


class WorkspaceState(object):
    '''
    Track workspace state
    '''
    def __init__(self):
        self.ewmh = EWMH()

    @property
    def current(self):
        ''' get current workspace number '''
        return self.ewmh.getCurrentDesktop()

    @property
    def total(self):
        ''' get total number of workspaces '''
        return self.ewmh.getNumberOfDesktops()

    @property
    def active(self):
        ''' get all active workspaces '''
        active_ws = set()
        for win in self.ewmh.getClientList():
            try:
                active_ws.add(self.ewmh.getWmDesktop(win))
            except Exception:
                pass
        return active_ws

    @property
    def urgent(self):
        ''' get workspaces with urgent windows '''
        urgent = set()
        for win in self.ewmh.getClientList():
            try:
                workspace = self.ewmh.getWmDesktop(win)
                hints = win.get_wm_hints()
                if hints is not None and hints['flags'] & Xutil.UrgencyHint:
                    urgent.add(workspace)
            except Exception:
                pass
        return urgent


def main():
    '''
    Main entry point
    '''
    keyboard = KeyboardLights(battery=True)
    while True:
        keyboard.draw()
        time.sleep(0.5)


if __name__ == '__main__':
    main()
