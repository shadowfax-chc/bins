#!/usr/bin/env python3
'''
A script to manage the keyboard lights
'''
import time
import dbus

from Xlib import Xutil
from ewmh import EWMH
from razer.client import DeviceManager


class Layout(object):
    '''
    A keyboard layout
    '''

    def __init__(self, device):
        self.device = device
        self._keys = {
            'esc': (0, 1),
            'f1': (0, 2),
            'f2': (0, 3),
            'f3': (0, 4),
            'f4': (0, 5),
            'f5': (0, 6),
            'f6': (0, 7),
            'f7': (0, 8),
            'f8': (0, 9),
            'f9': (0, 10),
            'f10': (0, 11),
            'f11': (0, 12),
            'f12': (0, 13),
            'ins': (0, 14),
            'del': (0, 15),

            '`': (1, 1),
            '1': (1, 2),
            '2': (1, 3),
            '3': (1, 4),
            '4': (1, 5),
            '5': (1, 6),
            '6': (1, 7),
            '7': (1, 8),
            '8': (1, 9),
            '9': (1, 10),
            '10': (1, 11),
            '-': (1, 12),
            '=': (1, 13),
            'backspace': [(1, 14), (1, 15)],

            'tab': [(2, 0), (2, 1)],
            'q': (2, 2),
            'w': (2, 3),
            'e': (2, 4),
            'r': (2, 5),
            't': (2, 6),
            'y': (2, 7),
            'u': (2, 8),
            'i': (2, 9),
            'o': (2, 10),
            'p': (2, 11),
            '[': (2, 12),
            ']': (2, 13),
            '\\': [(2, 14), (2, 15)],

            'caps': [(3, 0), (3, 1)],
            'a': (3, 2),
            's': (3, 3),
            'd': (3, 4),
            'f': (3, 5),
            'g': (3, 6),
            'h': (3, 7),
            'j': (3, 8),
            'k': (3, 9),
            'l': (3, 10),
            ';': (3, 11),
            '\'': (3, 12),
            'enter': [(3, 13), (3, 14), (3, 15)],

            'lshift': [(4, 0), (4, 1)],
            'z': (4, 2),
            'x': (4, 3),
            'c': (4, 4),
            'v': (4, 5),
            'b': (4, 6),
            'n': (4, 7),
            'm': (4, 8),
            ',': (4, 9),
            '.': (4, 10),
            '/': (4, 11),
            'rshift': [(4, 12), (4, 13), (4, 14)],

            'lctrl': (5, 0),
            'lfn': (5, 1),
            'lwin': (5, 2),
            'lalt': (5, 3),
            'space': [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
            'ralt': (5, 9),
            'rfn': (5, 10),
            'rcltrl': (5, 11),
            'larrow': (5, 12),
            'uarrow': (5, 13),
            'rarrow': (5, 14),
            'darrow': (5, 15),
        }


class KeyboardLights(object):
    '''
    Manager lights for the keyboard
    '''
    colors = {
        'clear': (0, 0, 0),
        'gray': (32, 32, 32),
        'green': (96, 128, 0),
        'blue': (0, 96, 128),
        'yellow': (64, 64, 0),
        'red': (128, 8, 0),
    }

    def __init__(self, battery=True):
        self.device = None
        self.flash = True
        self.battery_state = None

        # Create a DeviceManager. This is used to get specific devices
        device_manager = DeviceManager()
        # Disable daemon effect syncing.
        # Without this, the daemon will try to set the lighting effect to every device.
        device_manager.sync_effects = False
        for device in device_manager.devices:
            if device.type == 'keyboard':
                self.device = device
                break

        self.workspace_state = WorkspaceState()

        if battery:
            self.battery_state = BatteryState(colors=self.colors)

    def battery_colors(self):
        '''
        Set colors for battery life
        '''
        percent = self.battery_state.percentage
        charged = self.battery_state.charged
        color = self.battery_state.color
        charged_row = int((self.device.fx.advanced.rows - 1) * percent)
        if not charged:
            charged_row += 1
        bat_cols = [0, 1]
        for i in range(self.device.fx.advanced.rows):
            if i == charged_row:
                ccolor = color if self.flash or charged else self.colors['clear']
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = ccolor
            elif i <= charged_row:
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = color
            else:
                for col in bat_cols:
                    self.device.fx.advanced.matrix[i, col] = self.colors['clear']

    def workspae_colors(self):
        '''
        Set colors for workspaces
        '''
        current = self.workspace_state.current
        active = self.workspace_state.active
        urgent = self.workspace_state.urgent
        total = self.workspace_state.total

        for workspace in range(0, total):
            if workspace == current:
                color = self.colors['green']
            elif workspace in urgent:
                color = self.colors['red']
            elif workspace in active:
                color = self.colors['blue']
            else:
                color = self.colors['gray']

            if workspace > 9:
                row = 0
                col = workspace - 9 + 1
            else:
                row = 1
                col = workspace + 2
            self.device.fx.advanced.matrix[row, col] = color

    def draw(self):
        '''
        Draw the colors
        '''
        self.flash = not self.flash

        if self.battery_state:
            self.battery_colors()
        self.workspae_colors()
        self.device.fx.advanced.draw()


class BatteryState(object):
    '''
    Track battery level
    '''
    def __init__(self, colors):
        self.colors = colors
        self.sysbus = dbus.SystemBus()
        battery_bus = self.sysbus.get_object(
            'org.freedesktop.UPower',
            '/org/freedesktop/UPower/devices/battery_BAT0',
        )
        self.properties = dbus.Interface(
            battery_bus,
            'org.freedesktop.DBus.Properties',
        )

    @property
    def percentage(self):
        ''' Get percent left '''
        percentage = self.properties.Get(
            'org.freedesktop.UPower.Device',
            'Percentage',
        )
        return percentage / 100.0

    @property
    def color(self):
        ''' Get color based on percentage '''
        percent = self.percentage
        if percent >= .5:
            return self.colors['green']

        if percent >= .2:
            return self.colors['yellow']

        return self.colors['red']

    @property
    def state(self):
        ''' Current state '''
        return self.properties.Get(
            'org.freedesktop.UPower.Device',
            'State',
        )

    @property
    def charged(self):
        ''' Check if charged '''
        return self.state not in [1, 2]


class WorkspaceState(object):
    '''
    Track workspace state
    '''
    def __init__(self):
        self.ewmh = EWMH()

    @property
    def current(self):
        ''' get current workspace number '''
        return self.ewmh.getCurrentDesktop()

    @property
    def total(self):
        ''' get total number of workspaces '''
        return self.ewmh.getNumberOfDesktops()

    @property
    def active(self):
        ''' get all active workspaces '''
        active_ws = set()
        for win in self.ewmh.getClientList():
            try:
                active_ws.add(self.ewmh.getWmDesktop(win))
            except Exception:
                pass
        return active_ws

    @property
    def urgent(self):
        ''' get workspaces with urgent windows '''
        urgent = set()
        for win in self.ewmh.getClientList():
            try:
                workspace = self.ewmh.getWmDesktop(win)
                hints = win.get_wm_hints()
                if hints is not None and hints['flags'] & Xutil.UrgencyHint:
                    urgent.add(workspace)
            except Exception:
                pass
        return urgent


def main():
    '''
    Main entry point
    '''
    keyboard = KeyboardLights()
    while True:
        keyboard.draw()
        time.sleep(0.5)


if __name__ == '__main__':
    main()
